% This function calculate the cortex profile using the same size of image.% Algorithm is based on the article of Scott Daly. % Version 5, Sept 7th, 2007, by S.H.CHEN, Lab L2TI, Paris, FRANCE function [cortex,base] = fun_cortex(im_h,im_w) num_channel = 5 ; num_orient = 6 ; fmax = 1 ;mesa = zeros(im_h,im_w,num_channel) ; dom = zeros(im_h,im_w,num_channel) ; base = zeros(im_h,im_w) ;for m = 1:num_channel    f_center = fmax/(2^m) ;    tw = f_center*2/3 ;    if(m==num_channel)        for U = -0.5:1/im_w:0.5-1/im_w            for V = -0.5:1/im_h:0.5-1/im_h                fr = sqrt(U^2+V^2) ;                 fr_min = f_center - tw/2 ;                 fr_max = f_center + tw/2 ;                if(fr>fr_min && fr<fr_max)                    ind_U = round((U+1/2)*im_w) + 1;                    ind_V = round((V+1/2)*im_h) + 1 ;                     phase = pi*(fr-f_center+tw/2)/tw ;                     mesa(ind_V,ind_U,m) = 0.5*(1+cos(phase)) ;                 elseif(fr<fr_min)                    ind_U = round((U+1/2)*im_w) + 1;                    ind_V = round((V+1/2)*im_h) + 1 ;                     mesa(ind_V,ind_U,m) = 1 ;                                 end                f_center_base = fmax/(2^(num_channel+1)) ;                sigma = 1/3*(f_center_base + tw/2);                fr_threshold = f_center_base + tw/2 ;                if(fr<fr_threshold)                    ind_U = round((U+1/2)*im_w) + 1;                    ind_V = round((V+1/2)*im_h) + 1 ;                     base(ind_V,ind_U) = exp(-(fr^2/2*sigma^2)) ;                end            end        end        dom(:,:,m-1) = mesa(:,:,m-1)-mesa(:,:,m) ;        dom(:,:,m) = mesa(:,:,m) - base ;     else        for U = -0.5:1/im_w:0.5-1/im_w            for V = -0.5:1/im_h:0.5-1/im_h                fr = sqrt(U^2+V^2) ;                 fr_min = f_center - tw/2 ;                 fr_max = f_center + tw/2 ;                if(fr>fr_min && fr<fr_max)                    ind_U = round((U+1/2)*im_w) + 1;                    ind_V = round((V+1/2)*im_h) + 1 ;                     phase = pi*(fr-f_center+tw/2)/tw ;                     mesa(ind_V,ind_U,m) = 0.5*(1+cos(phase)) ;                 elseif(fr<fr_min)                    ind_U = round((U+1/2)*im_w) + 1;                    ind_V = round((V+1/2)*im_h) + 1 ;                     mesa(ind_V,ind_U,m) = 1 ;                                 end            end        end        if(m==1)            continue ;        else            dom(:,:,m-1) = mesa(:,:,m-1)-mesa(:,:,m) ;         end    endend% Construct Fan filterfan = zeros(im_h,im_w,num_orient) ; for p = 1:num_orient    theta_tw = 180/num_orient ;     theta_center = (p-1)*theta_tw - 90 ;     for U = -0.5:1/im_w:0.5-1/im_w        for V = -0.5:1/im_h:0.5-1/im_h            if(p==1)                theta = atan(V/U)*180/pi ;                 warning off MATLAB:divideByZero ;                 phase = pi*abs(theta-theta_center)/theta_tw ;                 if(abs(theta-theta_center)<=theta_tw)                    ind_U = round((U+1/2)*im_w) + 1;                    ind_V = round((V+1/2)*im_h) + 1 ;                     fan(ind_V,ind_U,p) = 0.5*(1+cos(phase)) ;                 end                theta = atan(-V/U)*180/pi ;                 warning off MATLAB:divideByZero ;                 phase = pi*abs(theta-theta_center)/theta_tw ;                 if(abs(theta-theta_center)<=theta_tw)                    ind_U = round((U+1/2)*im_w) + 1;                    ind_V = round((V+1/2)*im_h) + 1 ;                     fan(ind_V,ind_U,p) = 0.5*(1+cos(phase)) ;                 end            else                theta = atan(V/U)*180/pi ;                 phase = pi*abs(theta-theta_center)/theta_tw ;                 if(abs(theta-theta_center)<=theta_tw)                    ind_U = round((U+1/2)*im_w) + 1;                    ind_V = round((V+1/2)*im_h) + 1 ;                     fan(ind_V,ind_U,p) = 0.5*(1+cos(phase)) ;                 end            end        end    endend% Construct Cortex Filter cortex = zeros(im_h,im_w,num_channel,num_orient) ;for m = 1:num_channel%     figure ;     for n = 1:num_orient        cortex(:,:,m,n) = dom(:,:,m).*fan(:,:,n) ;%         subplot(2,num_orient/2,n),imshow(cortex(:,:,m,n)) ;     endend% End of program 